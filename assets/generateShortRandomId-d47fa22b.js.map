{"version":3,"mappings":"wFAAA,IAAAA,EAAiB,SAAkBC,EAAS,CAC1CC,EAAgBD,CAAO,EAEvB,IAAIE,EAAgBC,EAAoBH,CAAO,EAC/C,OAAAA,EAAQ,GAAKE,EAAc,GAC3BF,EAAQ,IAAME,EAAc,IAC5BF,EAAQ,KAAOE,EAAc,KACtBF,CACT,EAEA,SAASG,EAAoBH,EAAS,CAMpC,IAAII,EAAmB,OAAO,OAAO,IAAI,EAEzC,MAAO,CACL,GAAI,SAAUC,EAAWC,EAAUC,EAAK,CACtC,GAAI,OAAOD,GAAa,WACtB,MAAM,IAAI,MAAM,uCAAuC,EAEzD,IAAIE,EAAWJ,EAAiBC,CAAS,EACzC,OAAKG,IACHA,EAAWJ,EAAiBC,CAAS,EAAI,IAE3CG,EAAS,KAAK,CAAC,SAAUF,EAAU,IAAKC,CAAG,CAAC,EAErCP,CACR,EAED,IAAK,SAAUK,EAAWC,EAAU,CAClC,IAAIG,EAAmB,OAAOJ,EAAc,IAC5C,GAAII,EAEF,OAAAL,EAAmB,OAAO,OAAO,IAAI,EAC9BJ,EAGT,GAAII,EAAiBC,CAAS,EAAG,CAC/B,IAAIK,EAA8B,OAAOJ,GAAa,WACtD,GAAII,EACF,OAAON,EAAiBC,CAAS,MAGjC,SADIM,EAAYP,EAAiBC,CAAS,EACjC,EAAI,EAAG,EAAIM,EAAU,OAAQ,EAAE,EAClCA,EAAU,CAAC,EAAE,WAAaL,GAC5BK,EAAU,OAAO,EAAG,CAAC,CAI5B,CAED,OAAOX,CACR,EAED,KAAM,SAAUK,EAAW,CACzB,IAAIM,EAAYP,EAAiBC,CAAS,EAC1C,GAAI,CAACM,EACH,OAAOX,EAGT,IAAIY,EACA,UAAU,OAAS,IACrBA,EAAgB,MAAM,UAAU,OAAO,KAAK,UAAW,CAAC,GAE1D,QAAQC,EAAI,EAAGA,EAAIF,EAAU,OAAQ,EAAEE,EAAG,CACxC,IAAIC,EAAeH,EAAUE,CAAC,EAC9BC,EAAa,SAAS,MAAMA,EAAa,IAAKF,CAAa,CAC5D,CAED,OAAOZ,CACR,CACL,CACA,CAEA,SAASC,EAAgBD,EAAS,CAChC,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,oDAAoD,EAGtE,QADIe,EAAgB,CAAC,KAAM,OAAQ,KAAK,EAC/BF,EAAI,EAAGA,EAAIE,EAAc,OAAQ,EAAEF,EAC1C,GAAIb,EAAQ,eAAee,EAAcF,CAAC,CAAC,EACzC,MAAM,IAAI,MAAM,gEAAkEE,EAAcF,CAAC,EAAI,GAAG,CAG9G,cCrFMG,EAAMC,EAAS,EAAE,EAEvBC,EAAeF,ECDTG,EAAc,IAAI,IAET,eAAeC,EAAmBC,EAAS,CACxD,GAAIF,EAAY,IAAIE,CAAO,EACzB,OAAOF,EAAY,IAAIE,CAAO,EAKhC,IAAIC,EAAO,MADI,MAAM,MAAM,GAAGC,EAAO,cAAc,IAAIF,CAAO,MAAM,GAC1C,OAGtBG,GADU,MAAMC,EAAA,WAAO,qBAAgB,gFACvB,QAAQH,CAAI,EAChC,OAAAE,EAAM,YAAYE,GAAQ,CACxBA,EAAK,KAAK,EAAIA,EAAK,KAAK,EAAE,MAAM,GAAG,EAAE,IAAIC,GAAK,CAACA,CAAC,CACpD,CAAG,EAuBDR,EAAY,IAAIE,EAASG,CAAK,EACvBA,CACT,CC3Ce,SAASI,GAAwB,CAC9C,OAAO,KAAK,OAAM,EAAG,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAC/C","names":["ngraph_events","subject","validateSubject","eventsStorage","createEventsStorage","registeredEvents","eventName","callback","ctx","handlers","wantToRemoveAll","deleteAllCallbacksForEvent","callbacks","fireArguments","i","callbackInfo","reservedWords","bus","eventify","bus$1","graphsCache","downloadGroupGraph","groupId","text","config","graph","__vitePreload","node","x","generateShortRandomId"],"sources":["../../node_modules/ngraph.events/index.js","../../src/lib/bus.js","../../src/lib/downloadGroupGraph.js","../../src/lib/generateShortRandomId.js"],"sourcesContent":["module.exports = function eventify(subject) {\n  validateSubject(subject);\n\n  var eventsStorage = createEventsStorage(subject);\n  subject.on = eventsStorage.on;\n  subject.off = eventsStorage.off;\n  subject.fire = eventsStorage.fire;\n  return subject;\n};\n\nfunction createEventsStorage(subject) {\n  // Store all event listeners to this hash. Key is event name, value is array\n  // of callback records.\n  //\n  // A callback record consists of callback function and its optional context:\n  // { 'eventName' => [{callback: function, ctx: object}] }\n  var registeredEvents = Object.create(null);\n\n  return {\n    on: function (eventName, callback, ctx) {\n      if (typeof callback !== 'function') {\n        throw new Error('callback is expected to be a function');\n      }\n      var handlers = registeredEvents[eventName];\n      if (!handlers) {\n        handlers = registeredEvents[eventName] = [];\n      }\n      handlers.push({callback: callback, ctx: ctx});\n\n      return subject;\n    },\n\n    off: function (eventName, callback) {\n      var wantToRemoveAll = (typeof eventName === 'undefined');\n      if (wantToRemoveAll) {\n        // Killing old events storage should be enough in this case:\n        registeredEvents = Object.create(null);\n        return subject;\n      }\n\n      if (registeredEvents[eventName]) {\n        var deleteAllCallbacksForEvent = (typeof callback !== 'function');\n        if (deleteAllCallbacksForEvent) {\n          delete registeredEvents[eventName];\n        } else {\n          var callbacks = registeredEvents[eventName];\n          for (var i = 0; i < callbacks.length; ++i) {\n            if (callbacks[i].callback === callback) {\n              callbacks.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      return subject;\n    },\n\n    fire: function (eventName) {\n      var callbacks = registeredEvents[eventName];\n      if (!callbacks) {\n        return subject;\n      }\n\n      var fireArguments;\n      if (arguments.length > 1) {\n        fireArguments = Array.prototype.splice.call(arguments, 1);\n      }\n      for(var i = 0; i < callbacks.length; ++i) {\n        var callbackInfo = callbacks[i];\n        callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);\n      }\n\n      return subject;\n    }\n  };\n}\n\nfunction validateSubject(subject) {\n  if (!subject) {\n    throw new Error('Eventify cannot use falsy object as events subject');\n  }\n  var reservedWords = ['on', 'fire', 'off'];\n  for (var i = 0; i < reservedWords.length; ++i) {\n    if (subject.hasOwnProperty(reservedWords[i])) {\n      throw new Error(\"Subject cannot be eventified, since it already has property '\" + reservedWords[i] + \"'\");\n    }\n  }\n}\n","import eventify from 'ngraph.events';\n\nconst bus = eventify({});\n\nexport default bus;","// import createGraph from 'ngraph.graph';\nimport config from './config';\n\nconst graphsCache = new Map();\n\nexport default async function downloadGroupGraph(groupId) {\n  if (graphsCache.has(groupId)) {\n    return graphsCache.get(groupId);\n  }\n  // let graph = createGraph();\n  //console.log(\"In downloadGroupGraph\")\n  let response = await fetch(`${config.graphsEndpoint}/${groupId}.dot`);\n  let text = await response.text();\n\n  let fromDot = await import('ngraph.fromdot');\n  let graph = fromDot.default(text);\n  graph.forEachNode(node => {\n    node.data.l = node.data.l.split(',').map(x => +x);\n  })\n  // let nodeFetch = fetch(`${config.graphsEndpoint}/${groupId}.nodes.json`).then(r => r.json()).then(nodePositions => {\n  //   let nodeId = 0;\n  //   for (let i = 0; i < nodePositions.length; i += 2) {\n  //     nodeId += 1;\n  //     graph.addNode(nodeId, [nodePositions[i], nodePositions[i + 1]]);\n  //   }\n  // });\n  // let linkFetch = fetch(`${config.graphsEndpoint}/${groupId}.links.bin`).then(r => r.arrayBuffer()).then(buffer => {\n  //   // buffer is int32 array:\n  //   let view = new Int32Array(buffer);\n  //   let lastFrom = 0;\n  //   for (let i = 0; i < view.length; i++) {\n  //     let v = view[i];\n  //     if (v < 0) {\n  //       // new source node\n  //       lastFrom = -v;\n  //       continue;\n  //     }\n  //     graph.addLink(lastFrom, v);\n  //   }\n  // });\n  // await Promise.all([nodeFetch, linkFetch]);\n  graphsCache.set(groupId, graph);\n  return graph;\n}","export default function generateShortRandomId() {\n  return Math.random().toString(36).substr(2, 5);\n}"],"file":"assets/generateShortRandomId-d47fa22b.js"}